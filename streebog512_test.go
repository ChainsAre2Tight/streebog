package streebog_test

import (
	"bytes"
	"fmt"
	"reflect"
	"slices"
	"testing"

	"github.com/ChainsAre2Tight/streebog"
	"github.com/ChainsAre2Tight/streebog/pkg/testdata"
)

func TestStreebog512(t *testing.T) {
	tt := []struct {
		in, out []byte
	}{
		{
			in:  testdata.M1,
			out: testdata.Case1_HASH_512,
		}, {
			in:  testdata.M2,
			out: testdata.Case2_HASH_512,
		},
	}
	for test, td := range tt {
		t.Run(
			fmt.Sprintf("test #%0.2d | %0.16x -> %0.16x", test, td.in[0:16], td.out[0:16]),
			func(t *testing.T) {
				res, err := streebog.Streebog512(td.in)
				if err != nil {
					t.Fatalf("error: %s", err)
				}
				if !reflect.DeepEqual(td.out, res) {
					t.Fatalf("\nGot:  %0.16x, \nWant: %0.16x.", res, td.out)
				}
			},
		)
	}
}

func TestStreebog512Inverse(t *testing.T) {
	tt := []struct {
		in, out []byte
	}{

		{
			in: []byte{
				0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
				0x38, 0x39, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35,
				0x36, 0x37, 0x38, 0x39, 0x30, 0x31, 0x32, 0x33,
				0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x30, 0x31,
				0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
				0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
				0x38, 0x39, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35,
				0x36, 0x37, 0x38, 0x39, 0x30, 0x31, 0x32,
			},
			out: []byte{
				0x1b, 0x54, 0xd0, 0x1a, 0x4a, 0xf5, 0xb9, 0xd5,
				0xcc, 0x3d, 0x86, 0xd6, 0x8d, 0x28, 0x54, 0x62,
				0xb1, 0x9a, 0xbc, 0x24, 0x75, 0x22, 0x2f, 0x35,
				0xc0, 0x85, 0x12, 0x2b, 0xe4, 0xba, 0x1f, 0xfa,
				0x00, 0xad, 0x30, 0xf8, 0x76, 0x7b, 0x3a, 0x82,
				0x38, 0x4c, 0x65, 0x74, 0xf0, 0x24, 0xc3, 0x11,
				0xe2, 0xa4, 0x81, 0x33, 0x2b, 0x08, 0xef, 0x7f,
				0x41, 0x79, 0x78, 0x91, 0xc1, 0x64, 0x6f, 0x48,
			},
		},
	}
	for test, td := range tt {
		t.Run(
			fmt.Sprintf("test #%0.2d | %0.16x -> %0.16x", test, td.in[0:16], td.out[0:16]),
			func(t *testing.T) {
				slices.Reverse(td.in)
				slices.Reverse(td.out)
				res, err := streebog.Streebog512(td.in)
				if err != nil {
					t.Fatalf("error: %s", err)
				}
				if !reflect.DeepEqual(td.out, res) {
					t.Fatalf("\nGot:  %0.16x, \nWant: %0.16x.", res, td.out)
				}
			},
		)
	}
}

func BenchmarkSteebog512(b *testing.B) {
	value := testdata.M2
	var hash []byte
	var err error
	b.ReportAllocs()

	for b.Loop() {
		hash, err = streebog.Streebog512(value)
		if err != nil {
			b.Fatalf("Error: %s", err)
		}
	}

	if len(hash) == 0 {
		b.Fatalf("hash is too short")
	}
}

func TestBlocksized(t *testing.T) {
	m := make([]byte, 64)
	for i := 0; i < 64; i++ {
		m[i] = byte(i)
	}
	slices.Reverse(m)
	res, _ := streebog.Streebog512(m)
	slices.Reverse(res)
	if !bytes.Equal(res, []byte{
		0x2a, 0xe5, 0x81, 0xf1, 0x8a, 0xe8, 0x5e, 0x35,
		0x96, 0xc9, 0x36, 0xac, 0xbe, 0xf9, 0x10, 0xf2,
		0xed, 0x70, 0xdc, 0xf9, 0x1e, 0xd5, 0xd2, 0x4b,
		0x39, 0xa5, 0xaf, 0x65, 0x7b, 0xf8, 0x23, 0x2a,
		0x30, 0x3d, 0x68, 0x60, 0x56, 0xc8, 0xc0, 0x0b,
		0xf3, 0x0d, 0x42, 0xe1, 0x6c, 0xe2, 0x55, 0x42,
		0x6f, 0xa8, 0xa1, 0x55, 0xdc, 0xb3, 0xeb, 0x82,
		0x2d, 0x92, 0x58, 0x08, 0xf7, 0xc7, 0xe3, 0x45,
	}) {
		t.FailNow()
	}
}
